{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this;\n\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useState, useEffect } from 'react';\nimport { Ionicons } from '@expo/vector-icons';\nimport Title from \"../components/ui/Title\";\nimport Card from \"../components/ui/Card\";\nimport NumberContainer from \"../components/game/NumberContainer\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport InstructionText from \"../components/ui/InstructionText\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar generateRandomNumberBetween = function generateRandomNumberBetween(min, max, exclude) {\n  var randNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (randNum === exclude) {\n    return generateRandomNumberBetween(min, max, exclude);\n  } else {\n    return randNum;\n  }\n};\n\nvar minBoundary = 1;\nvar maxBoundary = 100;\n\nvar GameScreen = function GameScreen(_ref) {\n  var userNumber = _ref.userNumber,\n      onGameOver = _ref.onGameOver;\n  var initialGuess = generateRandomNumberBetween(1, 100, userNumber);\n\n  var _useState = useState(initialGuess),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  useEffect(function () {\n    if (currentGuess === userNumber) {\n      onGameOver();\n    }\n  }, [currentGuess, userNumber, onGameOver]);\n\n  var nextGuessHandler = function nextGuessHandler(direction) {\n    if (direction === 'lower' && currentGuess < userNumber || direction === 'greater' && currentGuess > userNumber) {\n      Alert.alert(\"Don't Lie\", \"That's the wrong command\", [{\n        text: 'Sorry!',\n        style: 'cancel'\n      }]);\n      return;\n    }\n\n    if (direction === 'lower') {\n      maxBoundary = currentGuess;\n    } else {\n      minBoundary = currentGuess + 1;\n    }\n\n    var newRandNumber = generateRandomNumberBetween(minBoundary, maxBoundary, currentGuess);\n    setCurrentGuess(newRandNumber);\n  };\n\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Title, {\n      children: \"Opponent's Guess\"\n    }), _jsx(NumberContainer, {\n      children: currentGuess\n    }), _jsxs(Card, {\n      children: [_jsx(InstructionText, {\n        style: styles.instructionText,\n        children: \"Higher or Lower?\"\n      }), _jsxs(View, {\n        style: styles.buttonsContainer,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(_this, 'lower'),\n            children: _jsx(Ionicons, {\n              name: \"md-remove\",\n              size: 24,\n              color: \"white\"\n            })\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: nextGuessHandler.bind(_this, 'greater'),\n            children: _jsx(Ionicons, {\n              name: \"md-add\",\n              size: 24,\n              color: \"white\"\n            })\n          })\n        })]\n      })]\n    }), _jsx(View, {})]\n  });\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 24\n  },\n  instructionText: {\n    marginBottom: 12\n  },\n  buttonsContainer: {\n    flexDirection: 'row'\n  },\n  buttonContainer: {\n    flex: 1\n  }\n});\nexport default GameScreen;","map":{"version":3,"names":["useState","useEffect","Ionicons","Title","Card","NumberContainer","PrimaryButton","InstructionText","generateRandomNumberBetween","min","max","exclude","randNum","Math","floor","random","minBoundary","maxBoundary","GameScreen","userNumber","onGameOver","initialGuess","currentGuess","setCurrentGuess","nextGuessHandler","direction","Alert","alert","text","style","newRandNumber","styles","screen","instructionText","buttonsContainer","buttonContainer","bind","StyleSheet","create","flex","padding","marginBottom","flexDirection"],"sources":["/Users/shyamkrishnansudhir/Documents/React Native Udemy/Number Guess Game/screens/GameScreen.js"],"sourcesContent":["import { View, StyleSheet, Alert } from 'react-native';\nimport { useState, useEffect } from 'react';\nimport { Ionicons } from '@expo/vector-icons';\nimport Title from '../components/ui/Title';\nimport Card from '../components/ui/Card';\nimport NumberContainer from '../components/game/NumberContainer';\nimport PrimaryButton from '../components/ui/PrimaryButton';\nimport InstructionText from '../components/ui/InstructionText';\n\nconst generateRandomNumberBetween = (min,max,exclude) => {\n    const randNum = Math.floor(Math.random() * (max-min)) + min;\n    if(randNum === exclude){\n        return generateRandomNumberBetween(min, max, exclude);\n    }else{\n        return randNum;\n    }\n}\n\nlet minBoundary = 1;\nlet maxBoundary = 100;\n\nconst GameScreen = ({userNumber, onGameOver}) => {\n    const initialGuess = generateRandomNumberBetween(1,100,userNumber)\n    const [currentGuess, setCurrentGuess] = useState(initialGuess);\n\n    useEffect(() => {\n        if(currentGuess === userNumber){\n            onGameOver();\n        }\n    },[currentGuess, userNumber, onGameOver]);\n\n    const nextGuessHandler = (direction) => {\n        if((direction === 'lower' && currentGuess < userNumber) ||\n             (direction === 'greater' && currentGuess > userNumber)){\n                Alert.alert(\"Don't Lie\",\"That's the wrong command\",\n                [{text: 'Sorry!', style: 'cancel'}])\n                return;\n             }\n        if(direction === 'lower'){\n            maxBoundary = currentGuess;\n        }\n        else{\n            minBoundary = currentGuess+1;\n        }\n        const newRandNumber = generateRandomNumberBetween(minBoundary,maxBoundary,currentGuess);\n        setCurrentGuess(newRandNumber);\n    }\n    return (\n        <View style={styles.screen}>\n            <Title>Opponent's Guess</Title>\n            <NumberContainer>{currentGuess}</NumberContainer>\n            <Card>\n                <InstructionText style={styles.instructionText}>\n                    Higher or Lower?\n                </InstructionText>\n                <View style={styles.buttonsContainer}>\n                    <View style={styles.buttonContainer}>\n                        <PrimaryButton \n                            onPress={nextGuessHandler.bind(this, 'lower')}>\n                        <Ionicons name=\"md-remove\" size={24} color=\"white\"/>\n                        </PrimaryButton>\n                    </View>\n                    <View style={styles.buttonContainer}>\n                        <PrimaryButton \n                            onPress={nextGuessHandler.bind(this, 'greater')}>\n                        <Ionicons name=\"md-add\" size={24} color=\"white\"/>\n                        </PrimaryButton>\n                    </View>\n                </View>\n            </Card>\n            <View>\n                {/* LOG ROUNDS */}\n            </View>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    screen: {\n        flex: 1,\n        padding: 24\n    },\n    instructionText: {\n        marginBottom: 12\n    },\n    buttonsContainer: {\n        flexDirection: 'row'\n    },\n    buttonContainer: {\n        flex: 1\n    }\n})\n\nexport default GameScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module"}